patterns: common prefix(large datasets will most likely be patterned)
stack: +1 for start, -1 for end
network flow
geometric problem with reasonable constraints -> big array
find nth lexicographically sorted string: find way to index strings and enumerate prefixes
    (if index of prefix + # of possible strings with this prefix >= n then the target string starts with this prefix)
try dp: does the answer to n - 1 help in any way to acquire the answer to n
use array with pointer instead of stack to save time
xor's and sums: try a prefix array
use stringbuilder instead of concatenating strings
covering an aabb with another aabb: split covered aabb into at most 3 parts: left, middle and right where 
    the middle part has width shared by both the covering and the covered aabb
    then split the middle part into top and bottom parts that don't overlap with the covering aabb
find a certain contiguous subsequence in a sequence in O(n): try two pointers
dfs pruning: does sorting anything helps?
multiple knapsack where all items have value 1: sort items by size
    sum of sizes <= sum of capacities
    when an item of size s is placed in knapsack i, another item of size s should be put in knapsack j where j >= i
    if it is possible to fit the smallest k items, total capacity wasted == sum of capacities - sum of the sizes of the smallest k items
    dfs from the most constrained item(the item with the largest size)
    binary search for max({k | k rails can be cut from the boards})
enumerate and find the largest possible k such that a conditional is met: binary search for k(if lg(upperLimit - lowerLimit) is most likely < max({k | conditional}))
multiplication is faster than division